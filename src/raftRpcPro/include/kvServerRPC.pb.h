// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvServerRPC.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kvServerRPC_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kvServerRPC_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kvServerRPC_2eproto;
namespace raftKVRpcProctoc {
class GetArgs;
struct GetArgsDefaultTypeInternal;
extern GetArgsDefaultTypeInternal _GetArgs_default_instance_;
class GetReply;
struct GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class PutAppendArgs;
struct PutAppendArgsDefaultTypeInternal;
extern PutAppendArgsDefaultTypeInternal _PutAppendArgs_default_instance_;
class PutAppendReply;
struct PutAppendReplyDefaultTypeInternal;
extern PutAppendReplyDefaultTypeInternal _PutAppendReply_default_instance_;
}  // namespace raftKVRpcProctoc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace raftKVRpcProctoc {

// ===================================================================


// -------------------------------------------------------------------

class PutAppendReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.PutAppendReply) */ {
 public:
  inline PutAppendReply() : PutAppendReply(nullptr) {}
  ~PutAppendReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PutAppendReply(::google::protobuf::internal::ConstantInitialized);

  inline PutAppendReply(const PutAppendReply& from)
      : PutAppendReply(nullptr, from) {}
  PutAppendReply(PutAppendReply&& from) noexcept
    : PutAppendReply() {
    *this = ::std::move(from);
  }

  inline PutAppendReply& operator=(const PutAppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutAppendReply& operator=(PutAppendReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutAppendReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutAppendReply* internal_default_instance() {
    return reinterpret_cast<const PutAppendReply*>(
               &_PutAppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutAppendReply& a, PutAppendReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PutAppendReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutAppendReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutAppendReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutAppendReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutAppendReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PutAppendReply& from) {
    PutAppendReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutAppendReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "raftKVRpcProctoc.PutAppendReply";
  }
  protected:
  explicit PutAppendReply(::google::protobuf::Arena* arena);
  PutAppendReply(::google::protobuf::Arena* arena, const PutAppendReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // bytes Err = 1;
  void clear_err() ;
  const std::string& err() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_err(Arg_&& arg, Args_... args);
  std::string* mutable_err();
  PROTOBUF_NODISCARD std::string* release_err();
  void set_allocated_err(std::string* value);

  private:
  const std::string& _internal_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err(
      const std::string& value);
  std::string* _internal_mutable_err();

  public:
  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.PutAppendReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr err_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvServerRPC_2eproto;
};// -------------------------------------------------------------------

class PutAppendArgs final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.PutAppendArgs) */ {
 public:
  inline PutAppendArgs() : PutAppendArgs(nullptr) {}
  ~PutAppendArgs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PutAppendArgs(::google::protobuf::internal::ConstantInitialized);

  inline PutAppendArgs(const PutAppendArgs& from)
      : PutAppendArgs(nullptr, from) {}
  PutAppendArgs(PutAppendArgs&& from) noexcept
    : PutAppendArgs() {
    *this = ::std::move(from);
  }

  inline PutAppendArgs& operator=(const PutAppendArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutAppendArgs& operator=(PutAppendArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutAppendArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutAppendArgs* internal_default_instance() {
    return reinterpret_cast<const PutAppendArgs*>(
               &_PutAppendArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutAppendArgs& a, PutAppendArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(PutAppendArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutAppendArgs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutAppendArgs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutAppendArgs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutAppendArgs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PutAppendArgs& from) {
    PutAppendArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutAppendArgs* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "raftKVRpcProctoc.PutAppendArgs";
  }
  protected:
  explicit PutAppendArgs(::google::protobuf::Arena* arena);
  PutAppendArgs(::google::protobuf::Arena* arena, const PutAppendArgs& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kOpFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kRequestIdFieldNumber = 5,
  };
  // bytes Key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes Value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // bytes Op = 3;
  void clear_op() ;
  const std::string& op() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_op(Arg_&& arg, Args_... args);
  std::string* mutable_op();
  PROTOBUF_NODISCARD std::string* release_op();
  void set_allocated_op(std::string* value);

  private:
  const std::string& _internal_op() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(
      const std::string& value);
  std::string* _internal_mutable_op();

  public:
  // bytes ClientId = 4;
  void clear_clientid() ;
  const std::string& clientid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clientid(Arg_&& arg, Args_... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* value);

  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(
      const std::string& value);
  std::string* _internal_mutable_clientid();

  public:
  // int32 RequestId = 5;
  void clear_requestid() ;
  ::int32_t requestid() const;
  void set_requestid(::int32_t value);

  private:
  ::int32_t _internal_requestid() const;
  void _internal_set_requestid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.PutAppendArgs)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::ArenaStringPtr op_;
    ::google::protobuf::internal::ArenaStringPtr clientid_;
    ::int32_t requestid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvServerRPC_2eproto;
};// -------------------------------------------------------------------

class GetReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.GetReply) */ {
 public:
  inline GetReply() : GetReply(nullptr) {}
  ~GetReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetReply(::google::protobuf::internal::ConstantInitialized);

  inline GetReply(const GetReply& from)
      : GetReply(nullptr, from) {}
  GetReply(GetReply&& from) noexcept
    : GetReply() {
    *this = ::std::move(from);
  }

  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReply& operator=(GetReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
               &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetReply& a, GetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetReply& from) {
    GetReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "raftKVRpcProctoc.GetReply";
  }
  protected:
  explicit GetReply(::google::protobuf::Arena* arena);
  GetReply(::google::protobuf::Arena* arena, const GetReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes Err = 1;
  void clear_err() ;
  const std::string& err() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_err(Arg_&& arg, Args_... args);
  std::string* mutable_err();
  PROTOBUF_NODISCARD std::string* release_err();
  void set_allocated_err(std::string* value);

  private:
  const std::string& _internal_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err(
      const std::string& value);
  std::string* _internal_mutable_err();

  public:
  // bytes Value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.GetReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr err_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvServerRPC_2eproto;
};// -------------------------------------------------------------------

class GetArgs final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.GetArgs) */ {
 public:
  inline GetArgs() : GetArgs(nullptr) {}
  ~GetArgs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetArgs(::google::protobuf::internal::ConstantInitialized);

  inline GetArgs(const GetArgs& from)
      : GetArgs(nullptr, from) {}
  GetArgs(GetArgs&& from) noexcept
    : GetArgs() {
    *this = ::std::move(from);
  }

  inline GetArgs& operator=(const GetArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetArgs& operator=(GetArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetArgs* internal_default_instance() {
    return reinterpret_cast<const GetArgs*>(
               &_GetArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetArgs& a, GetArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(GetArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetArgs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetArgs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetArgs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetArgs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetArgs& from) {
    GetArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetArgs* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "raftKVRpcProctoc.GetArgs";
  }
  protected:
  explicit GetArgs(::google::protobuf::Arena* arena);
  GetArgs(::google::protobuf::Arena* arena, const GetArgs& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
  };
  // bytes Key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes ClientId = 2;
  void clear_clientid() ;
  const std::string& clientid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clientid(Arg_&& arg, Args_... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* value);

  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(
      const std::string& value);
  std::string* _internal_mutable_clientid();

  public:
  // int32 RequestId = 3;
  void clear_requestid() ;
  ::int32_t requestid() const;
  void set_requestid(::int32_t value);

  private:
  ::int32_t _internal_requestid() const;
  void _internal_set_requestid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.GetArgs)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr clientid_;
    ::int32_t requestid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvServerRPC_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetArgs

// bytes Key = 1;
inline void GetArgs::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GetArgs::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.Key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetArgs::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.Key)
}
inline std::string* GetArgs::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetArgs.Key)
  return _s;
}
inline const std::string& GetArgs::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void GetArgs::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* GetArgs::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* GetArgs::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetArgs.Key)
  return _impl_.key_.Release();
}
inline void GetArgs::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetArgs.Key)
}

// bytes ClientId = 2;
inline void GetArgs::clear_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& GetArgs::clientid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.ClientId)
  return _internal_clientid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetArgs::set_clientid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.clientid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.ClientId)
}
inline std::string* GetArgs::mutable_clientid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetArgs.ClientId)
  return _s;
}
inline const std::string& GetArgs::_internal_clientid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clientid_.Get();
}
inline void GetArgs::_internal_set_clientid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.clientid_.Set(value, GetArena());
}
inline std::string* GetArgs::_internal_mutable_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.clientid_.Mutable( GetArena());
}
inline std::string* GetArgs::release_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetArgs.ClientId)
  return _impl_.clientid_.Release();
}
inline void GetArgs::set_allocated_clientid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.clientid_.IsDefault()) {
          _impl_.clientid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetArgs.ClientId)
}

// int32 RequestId = 3;
inline void GetArgs::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = 0;
}
inline ::int32_t GetArgs::requestid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.RequestId)
  return _internal_requestid();
}
inline void GetArgs::set_requestid(::int32_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.RequestId)
}
inline ::int32_t GetArgs::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_;
}
inline void GetArgs::_internal_set_requestid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_ = value;
}

// -------------------------------------------------------------------

// GetReply

// bytes Err = 1;
inline void GetReply::clear_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_.ClearToEmpty();
}
inline const std::string& GetReply::err() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetReply.Err)
  return _internal_err();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetReply::set_err(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.err_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetReply.Err)
}
inline std::string* GetReply::mutable_err() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetReply.Err)
  return _s;
}
inline const std::string& GetReply::_internal_err() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.err_.Get();
}
inline void GetReply::_internal_set_err(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.err_.Set(value, GetArena());
}
inline std::string* GetReply::_internal_mutable_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.err_.Mutable( GetArena());
}
inline std::string* GetReply::release_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetReply.Err)
  return _impl_.err_.Release();
}
inline void GetReply::set_allocated_err(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.err_.IsDefault()) {
          _impl_.err_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetReply.Err)
}

// bytes Value = 2;
inline void GetReply::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& GetReply::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetReply.Value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetReply::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetReply.Value)
}
inline std::string* GetReply::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetReply.Value)
  return _s;
}
inline const std::string& GetReply::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void GetReply::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* GetReply::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* GetReply::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetReply.Value)
  return _impl_.value_.Release();
}
inline void GetReply::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetReply.Value)
}

// -------------------------------------------------------------------

// PutAppendArgs

// bytes Key = 1;
inline void PutAppendArgs::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PutAppendArgs::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutAppendArgs::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Key)
}
inline std::string* PutAppendArgs::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Key)
  return _s;
}
inline const std::string& PutAppendArgs::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void PutAppendArgs::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* PutAppendArgs::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* PutAppendArgs::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Key)
  return _impl_.key_.Release();
}
inline void PutAppendArgs::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Key)
}

// bytes Value = 2;
inline void PutAppendArgs::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& PutAppendArgs::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutAppendArgs::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Value)
}
inline std::string* PutAppendArgs::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Value)
  return _s;
}
inline const std::string& PutAppendArgs::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void PutAppendArgs::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* PutAppendArgs::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* PutAppendArgs::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Value)
  return _impl_.value_.Release();
}
inline void PutAppendArgs::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Value)
}

// bytes Op = 3;
inline void PutAppendArgs::clear_op() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.op_.ClearToEmpty();
}
inline const std::string& PutAppendArgs::op() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Op)
  return _internal_op();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutAppendArgs::set_op(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.op_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Op)
}
inline std::string* PutAppendArgs::mutable_op() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Op)
  return _s;
}
inline const std::string& PutAppendArgs::_internal_op() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.op_.Get();
}
inline void PutAppendArgs::_internal_set_op(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.op_.Set(value, GetArena());
}
inline std::string* PutAppendArgs::_internal_mutable_op() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.op_.Mutable( GetArena());
}
inline std::string* PutAppendArgs::release_op() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Op)
  return _impl_.op_.Release();
}
inline void PutAppendArgs::set_allocated_op(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.op_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.op_.IsDefault()) {
          _impl_.op_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Op)
}

// bytes ClientId = 4;
inline void PutAppendArgs::clear_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& PutAppendArgs::clientid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.ClientId)
  return _internal_clientid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutAppendArgs::set_clientid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.clientid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
inline std::string* PutAppendArgs::mutable_clientid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.ClientId)
  return _s;
}
inline const std::string& PutAppendArgs::_internal_clientid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clientid_.Get();
}
inline void PutAppendArgs::_internal_set_clientid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.clientid_.Set(value, GetArena());
}
inline std::string* PutAppendArgs::_internal_mutable_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.clientid_.Mutable( GetArena());
}
inline std::string* PutAppendArgs::release_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.ClientId)
  return _impl_.clientid_.Release();
}
inline void PutAppendArgs::set_allocated_clientid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.clientid_.IsDefault()) {
          _impl_.clientid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.ClientId)
}

// int32 RequestId = 5;
inline void PutAppendArgs::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = 0;
}
inline ::int32_t PutAppendArgs::requestid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.RequestId)
  return _internal_requestid();
}
inline void PutAppendArgs::set_requestid(::int32_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.RequestId)
}
inline ::int32_t PutAppendArgs::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_;
}
inline void PutAppendArgs::_internal_set_requestid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_ = value;
}

// -------------------------------------------------------------------

// PutAppendReply

// bytes Err = 1;
inline void PutAppendReply::clear_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_.ClearToEmpty();
}
inline const std::string& PutAppendReply::err() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendReply.Err)
  return _internal_err();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutAppendReply::set_err(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.err_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendReply.Err)
}
inline std::string* PutAppendReply::mutable_err() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendReply.Err)
  return _s;
}
inline const std::string& PutAppendReply::_internal_err() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.err_.Get();
}
inline void PutAppendReply::_internal_set_err(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.err_.Set(value, GetArena());
}
inline std::string* PutAppendReply::_internal_mutable_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.err_.Mutable( GetArena());
}
inline std::string* PutAppendReply::release_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendReply.Err)
  return _impl_.err_.Release();
}
inline void PutAppendReply::set_allocated_err(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.err_.IsDefault()) {
          _impl_.err_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendReply.Err)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace raftKVRpcProctoc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto_2epb_2eh
