// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raftRPC.proto
#ifndef GRPC_raftRPC_2eproto__INCLUDED
#define GRPC_raftRPC_2eproto__INCLUDED

#include "raftRPC.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace raftRpcProctoc {

// 只有raft节点之间才会涉及rpc通信
class raftRpc final {
 public:
  static constexpr char const* service_full_name() {
    return "raftRpcProctoc.raftRpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::raftRpcProctoc::AppendEntriesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::AppendEntriesReply>> AsyncAppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::AppendEntriesReply>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::AppendEntriesReply>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::AppendEntriesReply>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    virtual ::grpc::Status InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::raftRpcProctoc::InstallSnapshotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::InstallSnapshotResponse>> AsyncInstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::InstallSnapshotResponse>>(AsyncInstallSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::InstallSnapshotResponse>> PrepareAsyncInstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::InstallSnapshotResponse>>(PrepareAsyncInstallSnapshotRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::raftRpcProctoc::RequestVoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::RequestVoteReply>> AsyncRequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::RequestVoteReply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::RequestVoteReply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::RequestVoteReply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::AppendEntriesReply>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::AppendEntriesReply>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::InstallSnapshotResponse>* AsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::InstallSnapshotResponse>* PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::RequestVoteReply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftRpcProctoc::RequestVoteReply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::raftRpcProctoc::AppendEntriesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::AppendEntriesReply>> AsyncAppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::AppendEntriesReply>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::AppendEntriesReply>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::AppendEntriesReply>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    ::grpc::Status InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::raftRpcProctoc::InstallSnapshotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::InstallSnapshotResponse>> AsyncInstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::InstallSnapshotResponse>>(AsyncInstallSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::InstallSnapshotResponse>> PrepareAsyncInstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::InstallSnapshotResponse>>(PrepareAsyncInstallSnapshotRaw(context, request, cq));
    }
    ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::raftRpcProctoc::RequestVoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::RequestVoteReply>> AsyncRequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::RequestVoteReply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::RequestVoteReply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::RequestVoteReply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response, std::function<void(::grpc::Status)>) override;
      void AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response, std::function<void(::grpc::Status)>) override;
      void InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response, std::function<void(::grpc::Status)>) override;
      void RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::AppendEntriesReply>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::AppendEntriesReply>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::InstallSnapshotResponse>* AsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::InstallSnapshotResponse>* PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::RequestVoteReply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::RequestVoteReply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntries_;
    const ::grpc::internal::RpcMethod rpcmethod_InstallSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestVote_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response);
    virtual ::grpc::Status InstallSnapshot(::grpc::ServerContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response);
    virtual ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendEntries() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::AppendEntriesArgs* /*request*/, ::raftRpcProctoc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::raftRpcProctoc::AppendEntriesArgs* request, ::grpc::ServerAsyncResponseWriter< ::raftRpcProctoc::AppendEntriesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::InstallSnapshotRequest* /*request*/, ::raftRpcProctoc::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallSnapshot(::grpc::ServerContext* context, ::raftRpcProctoc::InstallSnapshotRequest* request, ::grpc::ServerAsyncResponseWriter< ::raftRpcProctoc::InstallSnapshotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestVote() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::RequestVoteArgs* /*request*/, ::raftRpcProctoc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::raftRpcProctoc::RequestVoteArgs* request, ::grpc::ServerAsyncResponseWriter< ::raftRpcProctoc::RequestVoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AppendEntries<WithAsyncMethod_InstallSnapshot<WithAsyncMethod_RequestVote<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AppendEntries() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::raftRpcProctoc::AppendEntriesArgs, ::raftRpcProctoc::AppendEntriesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response) { return this->AppendEntries(context, request, response); }));}
    void SetMessageAllocatorFor_AppendEntries(
        ::grpc::MessageAllocator< ::raftRpcProctoc::AppendEntriesArgs, ::raftRpcProctoc::AppendEntriesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::raftRpcProctoc::AppendEntriesArgs, ::raftRpcProctoc::AppendEntriesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::AppendEntriesArgs* /*request*/, ::raftRpcProctoc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::raftRpcProctoc::AppendEntriesArgs* /*request*/, ::raftRpcProctoc::AppendEntriesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::raftRpcProctoc::InstallSnapshotRequest, ::raftRpcProctoc::InstallSnapshotResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response) { return this->InstallSnapshot(context, request, response); }));}
    void SetMessageAllocatorFor_InstallSnapshot(
        ::grpc::MessageAllocator< ::raftRpcProctoc::InstallSnapshotRequest, ::raftRpcProctoc::InstallSnapshotResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::raftRpcProctoc::InstallSnapshotRequest, ::raftRpcProctoc::InstallSnapshotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::InstallSnapshotRequest* /*request*/, ::raftRpcProctoc::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstallSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::raftRpcProctoc::InstallSnapshotRequest* /*request*/, ::raftRpcProctoc::InstallSnapshotResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestVote() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::raftRpcProctoc::RequestVoteArgs, ::raftRpcProctoc::RequestVoteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response) { return this->RequestVote(context, request, response); }));}
    void SetMessageAllocatorFor_RequestVote(
        ::grpc::MessageAllocator< ::raftRpcProctoc::RequestVoteArgs, ::raftRpcProctoc::RequestVoteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::raftRpcProctoc::RequestVoteArgs, ::raftRpcProctoc::RequestVoteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::RequestVoteArgs* /*request*/, ::raftRpcProctoc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::raftRpcProctoc::RequestVoteArgs* /*request*/, ::raftRpcProctoc::RequestVoteReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AppendEntries<WithCallbackMethod_InstallSnapshot<WithCallbackMethod_RequestVote<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendEntries() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::AppendEntriesArgs* /*request*/, ::raftRpcProctoc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::InstallSnapshotRequest* /*request*/, ::raftRpcProctoc::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestVote() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::RequestVoteArgs* /*request*/, ::raftRpcProctoc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::AppendEntriesArgs* /*request*/, ::raftRpcProctoc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::InstallSnapshotRequest* /*request*/, ::raftRpcProctoc::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestVote() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::RequestVoteArgs* /*request*/, ::raftRpcProctoc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppendEntries(context, request, response); }));
    }
    ~WithRawCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::AppendEntriesArgs* /*request*/, ::raftRpcProctoc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstallSnapshot(context, request, response); }));
    }
    ~WithRawCallbackMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::InstallSnapshotRequest* /*request*/, ::raftRpcProctoc::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstallSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestVote() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::RequestVoteArgs* /*request*/, ::raftRpcProctoc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppendEntries() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftRpcProctoc::AppendEntriesArgs, ::raftRpcProctoc::AppendEntriesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::raftRpcProctoc::AppendEntriesArgs, ::raftRpcProctoc::AppendEntriesReply>* streamer) {
                       return this->StreamedAppendEntries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::AppendEntriesArgs* /*request*/, ::raftRpcProctoc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftRpcProctoc::AppendEntriesArgs,::raftRpcProctoc::AppendEntriesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftRpcProctoc::InstallSnapshotRequest, ::raftRpcProctoc::InstallSnapshotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::raftRpcProctoc::InstallSnapshotRequest, ::raftRpcProctoc::InstallSnapshotResponse>* streamer) {
                       return this->StreamedInstallSnapshot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::InstallSnapshotRequest* /*request*/, ::raftRpcProctoc::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstallSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftRpcProctoc::InstallSnapshotRequest,::raftRpcProctoc::InstallSnapshotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestVote() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftRpcProctoc::RequestVoteArgs, ::raftRpcProctoc::RequestVoteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::raftRpcProctoc::RequestVoteArgs, ::raftRpcProctoc::RequestVoteReply>* streamer) {
                       return this->StreamedRequestVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftRpcProctoc::RequestVoteArgs* /*request*/, ::raftRpcProctoc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftRpcProctoc::RequestVoteArgs,::raftRpcProctoc::RequestVoteReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_InstallSnapshot<WithStreamedUnaryMethod_RequestVote<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_InstallSnapshot<WithStreamedUnaryMethod_RequestVote<Service > > > StreamedService;
};

}  // namespace raftRpcProctoc


#endif  // GRPC_raftRPC_2eproto__INCLUDED
